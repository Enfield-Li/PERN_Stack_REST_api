generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int                   @id() @default(autoincrement())
  createdAt           DateTime              @unique() @default(now())
  username            String                @unique() @db.VarChar
  email               String                @unique() @db.VarChar
  password            String                @db.VarChar
  postAmounts         Int                   @default(0)
  post                post[]
  interactions        interactions[]
  comments            comments[]
  commentInteractions commentInteractions[]
}

model post {
  id                  Int                   @id() @default(autoincrement())
  createdAt           DateTime              @unique() @default(now())
  updatedAt           DateTime              @unique() @updatedAt
  title               String                @db.VarChar
  content             String?               @db.VarChar
  userId              Int
  viewCount           Int                   @default(0)
  votePoints          Int                   @default(0)
  likePoints          Int                   @default(0)
  confusedPoints      Int                   @default(0)
  commentAmounts      Int                   @default(0)
  laughPoints         Int                   @default(0)
  user                user                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  interactions        interactions[]
  comments            comments[]
  commentInteractions commentInteractions[]
}

model interactions {
  voteStatus     Boolean?
  likeStatus     Boolean?
  laughStatus    Boolean?
  confusedStatus Boolean?
  read           Boolean  @default(false)
  checked        Boolean  @default(false)
  createdAt      DateTime @unique() @default(now())
  updatedAt      DateTime @unique() @updatedAt
  userId         Int
  postId         Int
  post           post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, postId])
}

model comments {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @unique() @default(now())
  updatedAt           DateTime              @updatedAt
  comment_text        String                @db.VarChar
  replyAmount         Int                   @default(0)
  replyToUserId       Int?
  parentCommentId     Int?
  userId              Int
  postId              Int
  user                user                  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  post                post                  @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  commentInteractions commentInteractions[]
}

model commentInteractions {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @unique() @default(now())
  updatedAt  DateTime @unique() @updatedAt
  voteStatus Boolean?
  commentId  Int
  userId     Int
  postId     Int
  post       post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comments   comments @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
